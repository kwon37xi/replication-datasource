apply plugin: 'java'
apply plugin: 'pmd'
apply plugin: 'findbugs'
apply plugin: 'checkstyle'
apply plugin: 'jacoco'
buildscript {
    ext {
        springBootVersion = '1.5.9.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}
apply plugin: 'org.springframework.boot'
repositories {
    mavenCentral()
}

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

ext {
    slf4jVersion = '1.7.5'
    logbackVersion = '1.1.2'

    h2Version = '1.4.184'
    hibernateVersion = '5.2.12.Final'
}
tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }

List loggers = [
    "org.slf4j:jcl-over-slf4j:${slf4jVersion}",
    "org.slf4j:log4j-over-slf4j:${slf4jVersion}",
    "org.slf4j:jul-to-slf4j:${slf4jVersion}",
    "ch.qos.logback:logback-core:${logbackVersion}",
    "ch.qos.logback:logback-classic:${logbackVersion}"
]

dependencies {
    compile "org.slf4j:slf4j-api:${slf4jVersion}"
    compile "org.springframework.boot:spring-boot-starter-data-jpa"
    compile "org.springframework.boot:spring-boot-starter"
    compile "org.springframework.boot:spring-boot-starter-web"
//    compile "org.hibernate:hibernate-entitymanager:${hibernateVersion}"
    compile "com.h2database:h2:${h2Version}"
    testCompile loggers
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.19'
    testCompile 'org.assertj:assertj-core:1.7.1'
    testCompile "org.springframework.boot:spring-boot-starter-data-jpa"
    testCompile "org.springframework.boot:spring-boot-starter"
    testCompile "org.springframework.boot:spring-boot-starter-web"
    testCompile "org.springframework.boot:spring-boot-starter-test"
//    testCompile "org.hibernate:hibernate-entitymanager:${hibernateVersion}"
    testCompile "com.h2database:h2:${h2Version}"
}

configurations {
    all.collect { configuration ->
        configuration.exclude group: 'commons-logging', module: 'commons-logging'
        configuration.exclude group: 'log4j', module: 'log4j'
        configuration.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
        configuration.exclude group: 'org.slf4j', module: 'slf4j-jcl'
        configuration.exclude group: 'org.slf4j', module: 'slf4j-jdk14'
    }
}

test {
    ignoreFailures = true
    testLogging {
        events "started", "passed", "failed"
        showStandardStreams true
    }
    
}

tasks.withType(Checkstyle) {
    reports {
        xml.enabled true
        html.enabled false
    }
    ignoreFailures = true
    configFile = file('config/checkstyle/checkstyle.xml') // rule 파일
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled true
        html.enabled false
    }
    ignoreFailures = true
    effort = 'default'
    reportLevel = 'medium'
}

pmd {
    ignoreFailures = true // 위반이 있어도 report만하고 넘어감
}

apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.7.5.201505241946"
}

test {
    jacoco {
        enabled = true
    }
}